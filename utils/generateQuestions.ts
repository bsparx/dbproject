import { PromptTemplate } from "@langchain/core/prompts";
import { ChatOpenAI } from "@langchain/openai";
import { StructuredOutputParser } from "langchain/output_parsers";
import { z } from "zod";

// Define the schema for the output
const parser = StructuredOutputParser.fromZodSchema(
  z.object({
    question: z
      .string()
      .describe(
        "Generate the hardest question related to forking.Only use the content provided to you to generate the question, don't use anything else.The question generated by referencing the material provided and looking at the user's inputted prompt. Ensure the question is clear, relevant, and focused on the core concepts."
      ),
    markingScheme: z
      .string()
      .describe(
        "Each question is worth 100%. You need to provide a detailed marking scheme explaining how the 100% for the question is allocated. It should neither exceed nor fall short of 100%."
      ),
    difficulty: z
      .number()
      .min(1)
      .max(10)
      .describe(
        "The difficulty of the question, rated on a scale of 1 to 10, where 1 is very easy and 10 is very hard."
      ),
  })
);

export { parser };

const getPrompt = async (content) => {
  const format_instructions = parser.getFormatInstructions();

  const prompt = new PromptTemplate({
    template:
      "IMPORTANT: DON't ASK ABOUT CONCEPTS THAT AREN't DISCUSSED IN THE PROMPT I PROVIDE.Analyze the provided content, the previous questions, and the user prompt carefully.Only use content that I've given to you, don't add material of your own to make the question. Generate new and unique questions that are relevant to the provided material and aligned with the user's intent. Do not repeat or closely resemble any previously generated questions. Ensure that the questions are diverse, well-structured, and cover different aspects of the material to encourage comprehensive understanding.Follow the instructions and format your response to match the format instructions, no matter what! \n{format_instructions}\n{entry}",
    inputVariables: ["entry"],
    partialVariables: { format_instructions },
  });

  const input = await prompt.format({
    entry: content,
  });

  return input;
};

export async function getGeneratedQuestionJson(prompt) {
  const input = await getPrompt(prompt);
  const llm = new ChatOpenAI({
    model: "gpt-4o-mini",
    apiKey: process.env.OPENAI_API_KEY,
  });

  const aiMsg = await llm.invoke([
    {
      role: "user",
      content: input,
    },
  ]);
  try {
    const parsedData = await parser.parse(aiMsg.content);
    return parsedData;
  } catch (e) {
    return "It didn't work";
  }
}
